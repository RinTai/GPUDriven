#pragma kernel InitialHiZ
#pragma kernel InterHiZ
#pragma kernel InitialBuffer
#pragma kernel InterBuffer
#pragma kernel Output

#pragma enable_d3d11_debug_symbols

#include "./DataStructDefine.hlsl"
#include "./NodeFunc.hlsl"

// ———————————————————————————————————————————————————— //  普通的剔除部分

//就是相当于一个全局变量 为什么不用SSBO 因为兼容性不太好
uniform float4 globalValueList[10];
uniform float4x4 _VPMatrix;

ConsumeStructuredBuffer<uint> _ConsumeList; //这个是当前遍历的节点
AppendStructuredBuffer<uint> _AppendList; //这个是细分后的节点放进去 这里会用到 PingPong 来传回_ConsumeList
AppendStructuredBuffer<uint> _FinalList;//这个是不需要细分的节点

ConsumeStructuredBuffer<uint> _TempList; //零食存放的顶点
RWTexture2D<uint> _CullingResult; //写为纹理用作通用的输出

Texture2D<float2> MinMaxHeightMap;
SamplerState sampler_MinMaxHeightMap;

Texture2D<float> _MipHiZMap; //已经经过Mip过后得到的HiZ的Map
SamplerState sampler_MipHiZMap;



// ———————————————————————————————————————————————————— // HiZ的生成部分
Texture2D<float> _CameraDepthTexture;
    
uint HiZWidth; //可以放到globalValue里面
uint HiZHeight;
uint _CurrentMipIndex;

float2 _CameraDepthSize;
    
//这里做Mip有一个更优化性能的方法就是 用groupSharedBufferl来访问 这个速度是特别快的
//这样进行纹理采样就可以变为直接取值。
//groupshared float hiz[32][16];

RWTexture2D<float> _HiZSrcDepthMip; //Mip之前的图片
RWTexture2D<float> _HiZDestDepthMip; //Mip之后的图片
// ———————————————————————————————————————————————————— // 


uint EncodeXYLOD(in uint x, in uint y, in uint LOD)
{
    return x << 16 | y << 4 | LOD;
}

void DecodeXYLOD(uint xzLOD, out uint x, out uint y, out uint LOD)
{
    x = (xzLOD >> 16) & 0xFFFF; //x右移16位占32 - 16 16位
    y = (xzLOD >> 4) & 0xFFF; //z 占16 - 4 12位
    LOD = xzLOD & 0xF; //LOD4 - 0 四位
}

uint IsNeedQuad(GlobalValue gvalue ,uint x, uint y, uint LOD , float maxHeight)
{
    uint2 xy = uint2(x, y);
    if(LOD == 0)
    {
        return 0;
    }
    
    float3 cameraWPos = gvalue.cameraWorldPos;
    float fov = gvalue.fov;
    float nodeSize = GetNodeSizeInLOD(gvalue, LOD);
    float2 nodePos = GetNodeCenterPos(gvalue, xy , LOD);
    int2 cameraNodeXY = GetCamearaNodeXY(gvalue, cameraWPos, LOD, float3(0, 0, 0));
    float dis = distance(nodePos, float2(cameraWPos.x, cameraWPos.z));
    float result = gvalue.LodJudgeFactor * nodeSize / (dis * fov);
    return 1-step(8, dis);
}

//这个是为了计算出当前节点的边界范围 AABB盒 最近点和最远点
void CalNodeBoundPos(GlobalValue gvalue, uint2 nodeXY, uint LOD,out float3 minPos,out float3 maxPos)
{
    float2 height = MinMaxHeightMap.SampleLevel(sampler_MinMaxHeightMap, nodeXY, LOD).xy;
    float2 minMaxHeight = (height - 0.5f) * 2; //* gvalue.worldHeightScale;
    float nodeSize = GetNodeSizeInLOD(gvalue, LOD);
    float2 nodeCenter = GetNodeCenterPos(gvalue, nodeXY, LOD);
    maxPos = float3(nodeSize * 0.5f + nodeCenter.x, 0, nodeSize * 0.5f  + nodeCenter.y); //高度问题导致了 视锥体近的部分会额外剔除一些 这个怎么解决呢？ 
    minPos = float3(nodeSize * -0.5f + nodeCenter.x, 0, nodeSize * -0.5f + nodeCenter.y);
}

bool IsOutSidePlane(float4 plane, float3 position)
{
    return dot(plane.xyz, position) + plane.w < 0;
}

//视锥体剔除（直接用六个float4 来表示 每个float4里面存的都是 每个面的法线）
uint FrustumCullBound(float3 minPos, float3 maxPos, float4 planes[6])
{
    int temp = 0;
    [unroll]
    for (int i = 0; i < 6; i++)
    {
        float3 pNear = minPos;
        float3 pFar = maxPos;
        float3 normal = planes[i].xyz;
        if (normal.x >= 0) 
            pNear.x = maxPos.x;
        if (normal.y >= 0)
            pNear.y = maxPos.y;
        if (normal.z >= 0)
            pNear.z = maxPos.z;
        
        if (normal.x >= 0) 
            pFar.x = minPos.x;
        if (normal.y >= 0)
            pFar.y = minPos.y;
        if (normal.z >= 0)
            pFar.z = minPos.z;
        
        if (IsOutSidePlane(planes[i], pNear) && IsOutSidePlane(planes[i],pFar))
        {
            return 0;
        }
    }
    return 1;
}

//检测一个点是否通过深度测试
bool HizCullPoint(int mip, uint2 mapsize_Mip, float3 pos)
{
    float2 mip_uv_step = float2(1.0 / mapsize_Mip.x, 1.0 / mapsize_Mip.y);
    float obj_Depth = pos.z;
    //vulkan may be wrong
    int3 ptXYInMap = int3(floor(pos.x / mip_uv_step.x), floor(pos.y / mip_uv_step.y), mip);   
    
    float scene_Depth = _MipHiZMap.Load(ptXYInMap).x;
    return CompareDepth(scene_Depth, obj_Depth);
}

uint IsHiZCulling(GlobalValue gvalue, float4x4 VPMatrix,float3 minPos, float3 maxPos)
{
    float3 minPosUVD, maxPosUVD;
    CalBoundUVD(gvalue, VPMatrix, minPos, maxPos, minPosUVD, maxPosUVD);//  拿到NDC空间下的顶点坐标
    
    float2 size = (maxPosUVD.xy - minPosUVD.xy) * uint2(HiZWidth, HiZHeight);
    uint2 mipXY = ceil(log2(size));
    const uint mip = clamp(max(mipXY.x, mipXY.y), 0, 8);
    const uint2 mipHizMapSize = uint2(HiZWidth, HiZHeight) >> mip;

    float obj_Depth = minPosUVD.z;
    float3 d1 = float3(minPosUVD.xy, obj_Depth);
    float3 d2 = float3(maxPosUVD.xy, obj_Depth);
    float3 d3 = float3(minPosUVD.x, maxPosUVD.y, obj_Depth);
    float3 d4 = float3(maxPosUVD.x, minPosUVD.y, obj_Depth);
    
    return HizCullPoint(mip, mipHizMapSize, d1) || HizCullPoint(mip, mipHizMapSize, d2) || HizCullPoint(mip, mipHizMapSize, d3) || HizCullPoint(mip, mipHizMapSize, d4);

}

//这里是得到基础的 这个思路写在这里 ，对每一层Mipmap的范围进行Dispatch ，相当于是4x4的Mip5 我们对他的其中一格进行如下的计算
[numthreads(1,1,1)]
void InitialBuffer(uint3 id : SV_DispatchThreadID)
{
    GlobalValue gvalue = GetGlobalValue(globalValueList);
    
    uint x = id.x % GetNodeNumInLOD(gvalue, gvalue.MAX_LOD);
    uint y = id.x / GetNodeNumInLOD(gvalue, gvalue.MAX_LOD);
    uint tempValue = EncodeXYLOD(x, y, gvalue.MAX_LOD);
    _AppendList.Append(tempValue);
}

[numthreads(1,1,1)] //实际上是可以跨线程运行的
void InterBuffer(uint3 id : SV_DispatchThreadID)
{
    GlobalValue gvalue = GetGlobalValue(globalValueList);
    uint tempId = _ConsumeList.Consume();
    
    uint x, y, LOD;
    DecodeXYLOD(tempId, x, y, LOD);
    uint2 nodeXY = uint2(x, y);

    float3 minPos, maxPos;
    CalNodeBoundPos(gvalue, nodeXY, LOD, minPos, maxPos);
    
    float4 frustumPlanes[6];
    GetFrustumPlane(globalValueList, frustumPlanes);
    
    uint isFrustumVisible = 1;
    isFrustumVisible = FrustumCullBound(minPos, maxPos, frustumPlanes);
    if (isFrustumVisible == 0)
    {
        return;
    }

    uint isHizVisible = 1;
    isHizVisible = IsHiZCulling(gvalue, _VPMatrix, minPos, maxPos);
    if (isHizVisible == 0)
    {
        return;
    }

    //这里做Hiz剔除
    //如果说要进行细分， 那么我就把他进行细分； 就是拆成2x2 然后放进AppendList 里
    uint is_NeedQuad = 0;
    is_NeedQuad = IsNeedQuad(gvalue, x, y, LOD, 1);
    if (is_NeedQuad == 1)
    {
        uint node0, node1, node2, node3;
        uint nextLOD = LOD - 1;
        node0 = EncodeXYLOD(x * 2, y * 2, nextLOD);
        node1 = EncodeXYLOD(x * 2, y * 2 + 1, nextLOD);
        node2 = EncodeXYLOD(x * 2 + 1, y * 2, nextLOD);
        node3 = EncodeXYLOD(x * 2 + 1, y * 2 + 1, nextLOD);
        
        _AppendList.Append(node0);
        _AppendList.Append(node1);
        _AppendList.Append(node2);
        _AppendList.Append(node3);
        
    }
    else
    {
        if (tempId != 0)
        { //如果说不进行细分，那么我就把他直接放近FinalList 里，结束了    
            _FinalList.Append(tempId);
        }
    }
}

[numthreads(1,1,1)]
void Output(uint3 id : SV_DispatchThreadID)
{
    uint currentNode = _TempList.Consume();
    
    uint cullResultID = id.x * 2;
    uint seamMaskID = id.x * 2 + 1;

    _CullingResult[uint2(cullResultID, id.y)] = currentNode;
}

float GetHiZDepeth2x2(float depth0, float depth1, float depth2, float depth3)
{
    return max(max(depth0, depth1), max(depth2, depth3));
}


[numthreads(8, 8, 1)]
void InitialHiZ(uint3 id : SV_DispatchThreadID)
{
    //边界处理
    if (id.x > HiZWidth || id.y > HiZHeight)
    {
        return;
    }
    
    uint2 srcXY = floor(id.xy * 1.0 * _CameraDepthSize.xy / float2(HiZWidth, HiZHeight));
      
    #if UNITY_UV_STARTS_AT_TOP
        srcXYy = 1.0 - srcXYy;  // 翻转 Y 轴
    #endif

    
    float depth = _CameraDepthTexture.Load(int3(srcXY, 0));
    
    #if UNITY_REVERSED_Z
    depth = 1.0 - depth;
    #endif
    

    _HiZDestDepthMip[id.xy] = depth;
}

[numthreads(8, 8, 1)]
void InterHiZ(uint3 id : SV_DispatchThreadID)
{
    if (id.x > HiZWidth || id.y > HiZHeight )
    {
        return;
    }
    //此处会报警告，但是我感觉没有问题 说是这里进行了隐式截断
    
    uint2 srxXY0 = id.xy << 1; //*2
    float depth0 = _HiZSrcDepthMip.Load(int3(srxXY0.xy, _CurrentMipIndex)).x;
    uint2 srxXY1 = id.xy * 2 + uint2(1, 0); //*2
    float depth1 = _HiZSrcDepthMip.Load(int3(srxXY1.xy, _CurrentMipIndex)).x;
    uint2 srxXY2 = id.xy * 2 + uint2(0, 1); //*2
    float depth2 = _HiZSrcDepthMip.Load(int3(srxXY2.xy, _CurrentMipIndex)).x;
    uint2 srxXY3 = id.xy * 2 + uint2(1, 1); //*2
    float depth3 = _HiZSrcDepthMip.Load(int3(srxXY3.xy, _CurrentMipIndex)).x;
    
    _HiZDestDepthMip[id.xy] = GetHiZDepeth2x2(depth0, depth1, depth2, depth3);
}


